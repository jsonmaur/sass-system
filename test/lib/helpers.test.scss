@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "../../lib/helpers";

@function test-empty-map() {
  $result: helpers.empty-map();

  @if meta.type-of($result) != map or list.length(map.keys($result)) > 0 {
    @return false;
  }

  @return true;
}

@function test-is-map() {
  $cases: [
    (input: ["foo"], output: false)
    (input: [()], output: true)
    (input: [(foo: bar)], output: true)
  ];

  @each $case in $cases {
    $result: helpers.is-map(map.get($case, input)...);

    @if $result != map.get($case, output) {
      @return false;
    }
  }

  @return true;
}

@function test-check-type() {
  $cases: [
    (input: [0, number], output: true)
    (input: [0, string], output: false)
    (input: ["", string], output: true)
    (input: [#000, color], output: true)
    (input: [1em, number], output: true)
    (input: [(), map], output: true)
    (input: [[one], map], output: false)
    (input: [(foo: bar), map], output: true)
    (input: [(foo: bar), map, string], output: true)
    (input: [(foo: bar), map, number], output: false)
    (input: [(foo: 0), map, number], output: true)
    (input: [[foo bar], list, string], output: true)
    (input: [[foo bar], list, number], output: false)
    (input: [[1 2], list, number], output: true)
  ];

  @each $case in $cases {
    $result: helpers.check-type(map.get($case, input)...);

    @if $result != map.get($case, output) {
      @return false;
    }
  }

  @return true;
}

@function test-key-conflict() {
  $cases: [
    (input: [(foo: bar), (foo: bar)], output: foo)
    (input: [(foo: bar), (bar: baz)], output: null)
  ];

  @each $case in $cases {
    $result: helpers.key-conflict(map.get($case, input)...);

    @if $result != map.get($case, output) {
      @return false;
    }
  }

  @return true;
}

@function test-list-shift() {
  $cases: (
    (input: [[1 2 3 4]], output: [2 3 4])
    (input: [[1 2 3 4], 2], output: [3 4])
  );

  @each $case in $cases {
    $result: helpers.list-shift(map.get($case, input)...);

    @if $result != map.get($case, output) {
      @return false;
    }
  }

  @return true;
}

@function test-list-merge() {
  $cases: [
    (input: [[1 2 3], []], output: [1 2 3])
    (input: [[1 2 3], [4 5 6]], output: [1 2 3 4 5 6])
  ];

  @each $case in $cases {
    $result: helpers.list-merge(map.get($case, input)...);

    @if $result != map.get($case, output) {
      @return false;
    }
  }

  @return true;
}

@function test-map-list-merge() {
  $cases: (
    (
      input: [
        (
          foo: foo,
          bar: (
            qux: qux,
            baz: [1 2 3],
            quux: (
              quuz: quuz,
              corge: [one two],
              foo: bar baz,
            )
          ),
        ),
        (
          qux: qux,
          bar: (
            foo: foo,
            baz: [4 5 6],
            quux: (
              quuz: quux,
              corge: [three],
              foo: [bar],
            ),
          ),
        ),
      ],
      output: (
        foo: foo,
        qux: qux,
        bar: (
          foo: foo,
          qux: qux,
          baz: [1 2 3 4 5 6],
          quux: (
            quuz: quux,
            corge: [one two three],
            foo: [bar],
          ),
        ),
      ),
    ),
  );

  @each $case in $cases {
    $result: helpers.map-list-merge(map.get($case, input)...);

    @if $result != map.get($case, output) {
      @return false;
    }
  }

  @return true;
}

@function test-combine() {
  $cases: [
    (input: [null], output: "")
    (input: [""], output: "")
    (input: [[]], output: "")
    (input: [[null]], output: "")
    (input: [[""]], output: "")
    (input: [[foo]], output: "foo")
    (input: [(foo,)], output: "foo")
    (input: [[foo bar]], output: "foobar")
    (input: [[foo]], separator: "_", output: "foo_")
    (input: [[foo bar]], separator: "_", output: "foo_bar_")
    (input: [(foo bar)], separator: "_", output: "foo_bar_")
    (input: [[foo bar]], separator: "_", trailing: false, output: "foo_bar")
    (input: [[foo bar]], separator: "-", trailing: true, output: "foo-bar-")
  ];

  @each $case in $cases {
    $result: helpers.combine(
      map.get($case, input)...,
      $separator: map.get($case, separator),
      $trailing: map.get($case, trailing),
    );

    @if $result != map.get($case, output) {
      @return false;
    }
  }

  @return true;
}

@function test-color-variants() {
  $cases: (
    (
      input: [(foobar: #555555)],
      output: (
        foobar-1: #eeeeee,
        foobar-2: #cccccc,
        foobar-3: #aaaaaa,
        foobar-4: #888888,
        foobar-5: #555555,
        foobar-6: #444444,
        foobar-7: #333333,
        foobar-8: #222222,
        foobar-9: #111111,
      ),
    ),
    (
      input: [(gray: #adb5bd)],
      output: (
        gray-1: #f7f8f8,
        gray-2: #e6e9eb,
        gray-3: #d6dade,
        gray-4: #c6cbd1,
        gray-5: #adb5bd,
        gray-6: #8a9197,
        gray-7: #686d71,
        gray-8: #45484c,
        gray-9: #232426,
      ),
    ),
  );

  @each $case in $cases {
    $result: helpers.color-variants(map.get($case, input)...);

    @if $result != map.get($case, output) {
      @return false;
    }
  }

  @return true;
}
