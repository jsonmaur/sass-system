@use "sass:map" as map;
@use "sass:meta" as meta;

/**
 * Normalize
 */

$normalize: true !default;

@if meta.type-of($normalize) != bool {
  @error "Expected `$normalize` to be a bool";
}

/**
 * Class Prefix
 */

$class-prefix: "" !default;

@if meta.type-of($class-prefix) != string {
  @error "Expected `$class-prefix` to be a string";
}

/**
 * Separator
 */

$separator: "\\:" !default;

@if meta.type-of($separator) != string {
  @error "Expected `$separator` to be a string";
}

/**
 * Dark Mode
 */

$dark-mode: "media" !default;

@if meta.type-of($dark-mode) != string {
  @error "Expected `$dark-mode` to be a string";
}

/**
 * Screens
 */

$screens: (
  sm: 640px,
  md: 768px,
  lg: 1024px,
  xl: 1280px,
  xxl: 1792px,
) !default;

@if meta.type-of($screens) != map {
  @error "Expected `$screens` to be a map";
}

@function screen($name) {
  @return map.get($screens, $name);
}

/**
 * Font Stacks
 */

$primary-fonts: (
  serif: null,
  sans-serif: null,
  monospace: null,
) !default;

$font-stacks: (
  serif: (
    map.get($primary-fonts, serif),
    ui-serif,
    Georgia,
    Cambria,
    "Times New Roman",
    Times,
    serif,
    "Apple Color Emoji",
    "Segoe UI Emoji",
    "Segoe UI Symbol",
    "Noto Color Emoji",
  ),
  sans-serif: (
    map.get($primary-fonts, sans-serif),
    ui-sans-serif,
    system-ui,
    -apple-system,
    BlinkMacSystemFont,
    "Segoe UI",
    Roboto,
    "Helvetica Neue",
    Arial,
    "Noto Sans",
    sans-serif,
    "Apple Color Emoji",
    "Segoe UI Emoji",
    "Segoe UI Symbol",
    "Noto Color Emoji",
  ),
  monospace: (
    map.get($primary-fonts, monospace),
    ui-monospace,
    SFMono-Regular,
    Menlo,
    Monaco,
    Consolas,
    "Liberation Mono",
    "Courier New",
    monospace,
    "Apple Color Emoji",
    "Segoe UI Emoji",
    "Segoe UI Symbol",
    "Noto Color Emoji",
  ),
) !default;

@if meta.type-of($primary-fonts) != map {
  @error "Expected `$primary-fonts` to be a map";
}

@if meta.type-of($font-stacks) != map {
  @error "Expected `$font-stacks` to be a map";
}

@function font_family($name) {
  @return map.get($font-stacks, $name);
}

/**
 * Font Weights
 */

$font-weights: (
  thin: 100,
  extra-light: 200,
  light: 300,
  regular: 400,
  medium: 500,
  semi-bold: 600,
  bold: 700,
  extra-bold: 800,
  heavy: 900,
) !default;

@if meta.type-of($font-weights) != map {
  @error "Expected `$font-weights` to be a map";
}

@function font_weight($name) {
  @return map.get($font-weights, $name);
}
