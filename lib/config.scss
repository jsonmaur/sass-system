@use "sass:map" as map;
@use "sass:meta" as meta;
@use "helpers" as helpers;

//
// Whether or not to import the tester generator class, which is used in the unit tests.
// Can be set to `true` or `false`.
//

$tester: false !default;

@if meta.type-of($tester) != bool {
  @error "Expected `$tester` to be a bool";
}

//
// Whether or not to import the opinionated normalize rules.
// Can be set to `true` or `false`.
//

$normalize: true !default;

@if meta.type-of($normalize) != bool {
  @error "Expected `$normalize` to be a bool";
}

//
// String that gets prefixed to every generated class name.
//

$class-prefix: "" !default;

@if meta.type-of($class-prefix) != string {
  @error "Expected `$class-prefix` to be a string";
}

//
// String that gets used to separate base classes from advanced/responsive selectors.
//

$separator: "\\:" !default;

@if meta.type-of($separator) != string {
  @error "Expected `$separator` to be a string";
}

//
// Whether to enable dark mode using a media query or a body class.
// Can be set to `media` or `class`.
//

$dark-mode: media !default;

@if meta.type-of($dark-mode) != string {
  @error "Expected `$dark-mode` to be a string";
}

//
// Used to append custom values to variable maps rather than replace them.
//

$extend: map.remove((x: x), x) !default; // weird way to make an empty map (ಠ_ಠ)

@if meta.type-of($extend) != map {
  @error "Expected `$extend` to be a map";
}

//
// A list of generaters to include for each class type. This helps cut down on file size
// significantly since every class name in the generators will get a class for each of the 5
// responsive classes (depending on how many values are in `$screens`), plus dark classes for all
// of them. It adds up quickly.
//
// Each generator can be enabled for base classes, pseudo classes, dark media queries, responsive
// media queries, and responsive dark media queries for deep customization. If there is no list
// specified for `responsive.dark`, then `dark` is used instead.
//

$generators: helpers.map-list-merge(
  (
    base: [],
    dark: (
      base: [],
    ),
    responsive: (
      base: [],
      dark: (
        base: [],
      ),
    ),
  ),
  map.get($extend, "generators") or ()
) !default;

@if meta.type-of($generators) != map {
  @error "Expected `$generators` to be a map";
}

//
// Different screen sizes used to generate responsive breakpoint mixins.
//

$screens: map.merge(
  (
    sm: 640px,
    md: 768px,
    lg: 1024px,
    xl: 1280px,
    xxl: 1792px,
  ),
  map.get($extend, "screens") or ()
) !default;

@if meta.type-of($screens) != map {
  @error "Expected `$screens` to be a map";
}

//
// Allows you to specify a primary font for each type of font stack,
// without having to redefine the entire font stack from scratch.
//

$primary-fonts: (
  serif: null,
  sans-serif: null,
  monospace: null,
) !default;

@if meta.type-of($primary-fonts) != map {
  @error "Expected `$primary-fonts` to be a map";
}

//
// Font stacks
//

$font-stacks: map.merge(
  (
    serif: [
      map.get($primary-fonts, serif)
      ui-serif
      Georgia
      Cambria
      "Times New Roman"
      Times
      serif
      "Apple Color Emoji"
      "Segoe UI Emoji"
      "Segoe UI Symbol"
      "Noto Color Emoji"
    ],
    sans-serif: [
      map.get($primary-fonts, sans-serif)
      ui-sans-serif
      system-ui
      -apple-system
      BlinkMacSystemFont
      "Segoe UI"
      Roboto
      "Helvetica Neue"
      Arial
      "Noto Sans"
      sans-serif
      "Apple Color Emoji"
      "Segoe UI Emoji"
      "Segoe UI Symbol"
      "Noto Color Emoji"
    ],
    monospace: [
      map.get($primary-fonts, monospace)
      ui-monospace
      SFMono-Regular
      Menlo
      Monaco
      Consolas
      "Liberation Mono"
      "Courier New"
      monospace
      "Apple Color Emoji"
      "Segoe UI Emoji"
      "Segoe UI Symbol"
      "Noto Color Emoji"
    ],
  ),
  map.get($extend, "font-stacks") or ()
) !default;

@if meta.type-of($font-stacks) != map {
  @error "Expected `$font-stacks` to be a map";
}

//
// Font weights
//

$font-weights: map.merge(
  (
    thin: 100,
    extra-light: 200,
    light: 300,
    regular: 400,
    medium: 500,
    semi-bold: 600,
    bold: 700,
    extra-bold: 800,
    heavy: 900,
  ),
  map.get($extend, "font-weights") or ()
) !default;

@if meta.type-of($font-weights) != map {
  @error "Expected `$font-weights` to be a map";
}

//
// Font sizes
//

$font-sizes: map.merge(
  (
    xxs: .75rem,
    xs: .875rem,
    sm: 1rem,
    md: 1.25rem,
    lg: 1.5rem,
    xl: 2.25rem,
    xxl: 3rem,
    jumbo: 6rem,
  ),
  map.get($extend, "font-sizes") or ()
) !default;

@if meta.type-of($font-sizes) != map {
  @error "Expected `$font-sizes` to be a map";
}

//
// Font leading (line spacing)
//

$font-leading: map.merge(
  (
    base: 1em,
    title: 1.25em,
    copy: 1.5em,
  ),
  map.get($extend, "font-leading") or ()
) !default;

@if meta.type-of($font-leading) != map {
  @error "Expected `$font-leading` to be a map";
}

//
// Font tracking (letter spacing)
//

$font-tracking: map.merge(
  (
    tight: -.05em,
    open: .1em,
    mega: .25em,
  ),
  map.get($extend, "font-tracking") or ()
) !default;

@if meta.type-of($font-tracking) != map {
  @error "Expected `$font-tracking` to be a map";
}

//
// Text indent
//

$text-indent: 1em !default;

@if meta.type-of($text-indent) != number {
  @error "Expected `$text-indent` to be a number";
}

//
// Measures
//

$measures: map.merge(
  (
    narrow: 20em, // ~45 characters
    regular: 30em, // ~66 characters
    wide: 34em, // ~80 characters
  ),
  map.get($extend, "measures") or ()
) !default;

@if meta.type-of($measures) != map {
  @error "Expected `$measures` to be a map";
}
