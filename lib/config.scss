@use "sass:list";
@use "sass:map";
@use "sass:meta";
@use "helpers";

//
// Append custom values to config maps/lists rather than replace them.
//

$extend: helpers.empty-map() !default;

@if not helpers.check-type($extend, map) {
  @error "Expected $extend to be a map";
}

//
// Import the opinionated normalize rules.
//

$normalize: true !default;

@if not helpers.check-type($normalize, bool) {
  @error "Expected $normalize to be a boolean";
}

//
// String that gets prefixed to every generated class name.
//

$class-prefix: "" !default;

@if not helpers.check-type($class-prefix, string) {
  @error "Expected $class-prefix to be a string";
}

//
// String that gets used to separate base classes from advanced/responsive selectors.
//

$separator: "\\:" !default;

@if not helpers.check-type($separator, string) {
  @error "Expected $separator to be a string";
}

//
// Enable dark mode using a media query or a body class.
// Can be set to `media` or `class`.
//

$dark-mode: media !default;

@if not helpers.check-type($dark-mode, string) {
  @error "Expected $dark-mode to be a string";
}

//
// Named screen size values used to generate responsive mixins and classes.
//

$screens: map.merge(
  (
    xs: 640px,
    sm: 768px, // +128px
    md: 1024px, // +256px
    lg: 1280px, // +256px
    xl: 1792px, // +512px
  ),
  map.get($extend, "screens") or ()
) !default;

@if not helpers.check-type($screens, map, number) {
  @error "Expected $screens to be a map of numbers";
}

@function screen($name) {
  @return map.get($screens, $name);
}

//
// Sizing values used for width and height. Classes correspond with index in list.
//

$sizing: helpers.list-merge(
  [
    1rem
    2rem
    4rem
    8rem
    16rem
    32rem
    48rem
    64rem
  ],
  map.get($extend, "sizing") or ()
) !default;

@if not helpers.check-type($sizing, list, number) {
  @error "Expected $sizing to be a list of numbers";
}

@function size($index) {
  @return list.nth($sizing, $index);
}

//
// Spacing values used for margin and padding. Classes correspond with index in list.
//

$spacing: helpers.list-merge(
  [
    .25rem
    .5rem
    1rem
    2rem
    4rem
    8rem
    16rem
    32rem
  ],
  map.get($extend, "spacing") or ()
) !default;

@if not helpers.check-type($spacing, list, number) {
  @error "Expected $spacing to be a list of numbers";
}

@function space($index) {
  @return list.nth($spacing, $index);
}

//
// Primary fonts for each type of font stack, to avoid redefining the font stacks from scratch.
//

$primary-fonts: (
  serif: null,
  sans-serif: null,
  monospace: null,
) !default;

@if not helpers.check-type($primary-fonts, map) {
  @error "Expected $primary-fonts to be a map";
}

//
// Named values for font family with the associated primary font prepended if it exists.
//

$font-stacks: map.merge(
  (
    serif: [
      map.get($primary-fonts, serif)
      ui-serif
      Georgia
      Cambria
      "Times New Roman"
      Times
      serif
      "Apple Color Emoji"
      "Segoe UI Emoji"
      "Segoe UI Symbol"
      "Noto Color Emoji"
    ],
    sans-serif: [
      map.get($primary-fonts, sans-serif)
      ui-sans-serif
      system-ui
      -apple-system
      BlinkMacSystemFont
      "Segoe UI"
      Roboto
      "Helvetica Neue"
      Arial
      "Noto Sans"
      sans-serif
      "Apple Color Emoji"
      "Segoe UI Emoji"
      "Segoe UI Symbol"
      "Noto Color Emoji"
    ],
    monospace: [
      map.get($primary-fonts, monospace)
      ui-monospace
      SFMono-Regular
      Menlo
      Monaco
      Consolas
      "Liberation Mono"
      "Courier New"
      monospace
      "Apple Color Emoji"
      "Segoe UI Emoji"
      "Segoe UI Symbol"
      "Noto Color Emoji"
    ],
  ),
  map.get($extend, "font-stacks") or ()
) !default;

@if not helpers.check-type($font-stacks, map, list) {
  @error "Expected $font-stacks to be a map of lists";
}

@function font($name) {
  @return map.get($font-stacks, $name);
}

//
// Named values for font weight.
//

$font-weights: map.merge(
  (
    thin: 100,
    extra-light: 200,
    light: 300,
    regular: 400,
    medium: 500,
    semi-bold: 600,
    bold: 700,
    extra-bold: 800,
    heavy: 900,
  ),
  map.get($extend, "font-weights") or ()
) !default;

@if not helpers.check-type($font-weights, map, number) {
  @error "Expected $font-weights to be a map of numbers";
}

@function font-weight($name) {
  @return map.get($font-weights, $name);
}

//
// Named values for font size.
//

$font-sizes: map.merge(
  (
    xxs: .75rem, // 12px
    xs: .875rem, // 14px
    sm: 1rem, // 16px
    md: 1.25rem, // 20px
    lg: 1.5rem, // 24px
    xl: 2.25rem, // 36px
    xxl: 3rem, // 48px
    jumbo: 6rem, // 96px
  ),
  map.get($extend, "font-sizes") or ()
) !default;

@if not helpers.check-type($font-sizes, map, number) {
  @error "Expected $font-sizes to be a map of numbers";
}

@function font-size($name) {
  @return map.get($font-sizes, $name);
}

//
// Named values for font leading (line spacing).
//

$font-leading: map.merge(
  (
    solid: 1em,
    title: 1.25em,
    copy: 1.5em,
  ),
  map.get($extend, "font-leading") or ()
) !default;

@if not helpers.check-type($font-leading, map, number) {
  @error "Expected $font-leading to be a map of numbers";
}

@function font-lead($name) {
  @return map.get($font-leading, $name);
}

//
// Named values for font tracking (letter spacing).
//

$font-tracking: map.merge(
  (
    tight: -.05em,
    open: .1em,
    mega: .25em,
  ),
  map.get($extend, "font-tracking") or ()
) !default;

@if not helpers.check-type($font-tracking, map, number) {
  @error "Expected $font-tracking to be a map of numbers";
}

@function font-track($name) {
  @return map.get($font-tracking, $name);
}

//
// Value used for text indentation.
//

$text-indent: 1em !default;

@if not helpers.check-type($text-indent, number) {
  @error "Expected $text-indent to be a number";
}

//
// Named values for box shadow.
//

$box-shadows: map.merge(
  (
    low: (0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1)),
    mid: (0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1)),
    high: (0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1)),
    mega: 0 25px 50px -12px rgb(0 0 0 / 0.25),
    inner: inset 0 2px 4px 0 rgb(0 0 0 / 0.05),
  ),
  map.get($extend, "box-shadows") or ()
) !default;

@if not helpers.check-type($box-shadows, map, list) {
  @error "Expected $box-shadows to be a map of lists";
}

@function box-shadow($name) {
  @return map.get($box-shadows, $name);
}

//
// Named values for colors that have auto-generated variations. By default, it will generate 4
// darker variations and 4 lighter variations of each color for a total of 9. The base color will
// exist as `.[name]-5` with `.[name]-[1-4]` for lighter variations and `.[name]-[6-9]` for
// darker variations.
//

$colors: map.merge(
  (
    gray: #adb5bd,
    cyan: #0dcaf0,
    teal: #20c997,
    green: #198754,
    yellow: #ffc107,
    orange: #fd7e14,
    red: #dc3545,
    pink: #d63384,
    purple: #6f42c1,
    indigo: #6610f2,
    blue: #0d6efd,
  ),
  map.get($extend, "colors") or ()
) !default;

@if not helpers.check-type($colors, map, color) {
  @error "Expected $colors to be a map of colors";
}

$colors: helpers.color-variants($colors);

//
// Named values for brand colors that don't have auto-generated variations. The color classes are
// not prefixed with anything, so be careful while naming to avoid conflicts with other generated
// classes. e.g. `black` creates a `.black` class.
//

$brand-colors: map.merge(
  (
    black: #000000,
    white: #ffffff,
  ),
  map.get($extend, "brand-colors") or ()
) !default;

@if not helpers.check-type($brand-colors, map, color) {
  @error "Expected $brand-colors to be a map of colors";
}

@function color($name) {
  @return map.get(map.merge($colors, $brand-colors), $name);
}

//
// Named values for selectors that can be used when adding generators, and the associated suffix
// for the class. The selector name can be a space-separated list for nested selectors. e.g.
// `hover disabled: ":hover:disabled"` will create `.hover\:disabled\:classname:hover:disabled`.
// Using a space in the key name is to ensure the configured `$separator` is used in the class.
//

$selectors: map.merge(
  (
    base: "",
    // pseudo classes
    hover: ":hover",
    focus: ":focus",
    focus-within: ":focus-within",
    focus-visible: ":focus-visible",
    active: ":active",
    visited: ":visited",
    target: ":target",
    first: ":first-child",
    last: ":last-child",
    only: ":only-child",
    odd: ":nth-child(odd)",
    even: ":nth-child(even)",
    first-of-type: ":first-of-type",
    last-of-type: ":last-of-type",
    only-of-type: ":only-of-type",
    empty: ":empty",
    disabled: ":disabled",
    checked: ":checked",
    indeterminate: ":indeterminate",
    default: ":default",
    required: ":required",
    valid: ":valid",
    invalid: ":invalid",
    in-range: ":in-range",
    out-of-range: ":out-of-range",
    placeholder-shown: ":placeholder-shown",
    autofill: ":autofill",
    read-only: ":read-only",
    rtl: ":dir(rtl)",
    ltr: ":dir(ltr)",
    // pseudo elements
    before: "::before",
    after: "::after",
    first-letter: "::first-letter",
    first-line: "::first-line",
    marker: "::marker",
    selection: "::selection",
    file: "::file-selector-button",
    placeholder: "::placeholder",
    // attribute selectors
    open: "[open]",
    // nested selectors
    hover disabled: ":hover:disabled",
    hover before: ":hover::before",
    hover after: ":hover::after",
  ),
  map.get($extend, "selectors") or (),
) !default;

@if not helpers.check-type($selectors, map, string) {
  @error "Expected $selectors to be a map of strings";
}

//
// Classname generators to include for each selector type. Deciding what to include before
// building rather than removing afterwards cuts down on build system complexity, and helps cut
// down the final CSS file size. Since every class name could potentially have a base class, a
// base dark class, classes within media queries for for each of the 5 screen sizes (depending on
// how many screens are configured), and dark classes for each of those media queries. It adds up
// very quickly, and we want to keep stuff out of the build unless it's needed.
//
// See `$selectors` for a list of available selectors. Use the `dark` selector to support dark
// classes, and the `responsive` selector or individual screen selectors (such as `sm` and `md`)
// for responsive classes. Responsive dark classes can be enabled with the nested `dark` selector
// within `responsive` or the individual screen selectors. To avoid copying the same lists over
// and over if multiple selectors are used, user can use a Sass variable.
//

$generators: helpers.map-list-merge(
  (
    base: [
      background-color
      box-shadow
      box-sizing
      color
      font-family
      font-size
      font-style
      font-variant
      font-weight
      height
      letter-spacing
      line-height
      margin
      max-height
      max-width
      min-height
      min-width
      opacity
      padding
      text-align
      text-decoration
      text-indent
      text-overflow
      text-transform
      vertical-align
      white-space
      width
    ],
    hover: [],
    dark: (
      base: [],
    ),
    responsive: (
      base: [],
      dark: (
        base: [],
      ),
    ),
  ),
  map.get($extend, "generators") or ()
) !default;

@if not helpers.check-type($generators, map) {
  @error "Expected $generators to be a map";
}

//
// Sanity checks to ensure values that have the same class prefix don't have conflicting keys.
//

$-base-conflict: helpers.key-conflict($font-stacks, $brand-colors);
@if $-base-conflict {
  @error "Found conflicting keys in $font-stacks and $brand-colors: `#{$-base-conflict}`";
}

$-text-conflict: helpers.key-conflict($font-weights, $font-sizes);
@if $-text-conflict {
  @error "Found conflicting keys in $font-weights and $font-sizes: `#{$-text-conflict}`";
}

$-screen-reserved-conflict: helpers.key-conflict($screens, (
  0: null,
  px: null,
  full: null,
  screen: null,
  min: null,
  max: null,
  fit: null,
  auto: null,
));
@if $-screen-reserved-conflict {
  @error "The following key cannot be used for $screens:: `#{$-screen-reserved-conflict}`";
}
