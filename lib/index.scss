@use "sass:list" as list;
@use "sass:map" as map;
@use "sass:meta" as meta;
@use "config" as config;
@use "generators" as generators;
@use "helpers" as helpers;
@use "media" as media;
@use "normalize" as normalize;

//
//

//
// Renders content within a dark mode media query or class depending on which is enabled.
//
@mixin dark-content($generators) {
  $generators:
    map.get($generators, dark) or
    helpers.empty-map();

  @if config.$dark-mode == media {
    @include media.media-dark {
      @content($generators);
    }
  }

  @if config.$dark-mode == class {
    .dark {
      @content($generators);
    }
  }
}

//
// Renders content within responsive media queries, as well as responsive dark media queries.
//
@mixin responsive-content {
  @each $key, $value in config.$screens {
    $generators:
      map.get(config.$generators, $key) or
      map.get(config.$generators, responsive) or
      helpers.empty-map();

    @include media.media-up-to($key) {
      @content($generators, $key);

      @include dark-content($generators) using ($-generators) {
        @content($-generators, $key, dark);
      }
    }
  }
}

//
// Loops through each generator list and renders classes for each generator with optional class
// prefixes. For example, calling `@include generator-content(_, "foo", "bar")` will result in
// class names such as `.foo\:bar\:classname:selector {}`.
//
@mixin generator-content($generators, $prefixes...) {
  $reserved: list.join([dark responsive], map.keys(config.$screens));

  @each $key, $value in $generators {
    @if not list.index($reserved, $key) {
      @if not list.index(map.keys(config.$selectors), $key) {
        @error "`#{$key}` is not a supported selector for $generators";
      }

      @else if meta.type-of($value) == list {
        // @include inherit-content($value) using ($-value) {
        @if $key == base {
          $prepend: helpers.combine($prefixes, $separator: config.$separator);

          @include generators.render($value, $prepend);
        }

        @else {
          $prepend: helpers.combine(list.append($prefixes, $key), $separator: config.$separator);
          $append: map.get(config.$selectors, $key);

          @if meta.type-of($key) == list {
            $k: helpers.combine($key, $separator: config.$separator, $trailing: false);
            $prepend: helpers.combine(list.append($prefixes, $k), $separator: config.$separator);
          }

          @include generators.render($value, $prepend, $append);
        }
        // }
      }

      @else {
        @error "`#{$value}` is not a supported value for $generators";
      }
    }
  }
}

//
// Kick things off
//
@mixin render {
  @if config.$normalize {
    @include normalize.modern();
    @include normalize.custom();
  }

  @include generator-content(config.$generators);
  @include dark-content(config.$generators) using ($-generators) {
    @include generator-content($-generators, dark);
  }

  @include responsive-content using ($-generators, $-keys...) {
    @include generator-content($-generators, $-keys...);
  }
}
