@use "sass:list" as list;
@use "sass:map" as map;
@use "media" as media;
@use "normalize" as normalize;
@use "generators/alignment" as alignment;
@use "generators/color" as color;
@use "generators/tester" as tester;
@use "generators/typography" as typography;
@use "generators/width" as width;
@use "variables" as var;

@if var.$normalize {
  @include normalize.modern();
  @include normalize.custom();
}

$-pseudo-selectors: (
  hover: ":hover",
  focus: ":focus",
  focus-within: ":focus-within",
  focus-visible: ":focus-visible",
  active: ":active",
  visited: ":visited",
  target: ":target",
  first: ":first-child",
  last: ":last-child",
  only: ":only-child",
  odd: ":nth-child(odd)",
  even: ":nth-child(even)",
  first-of-type: ":first-of-type",
  last-of-type: ":last-of-type",
  only-of-type: ":only-of-type",
  empty: ":empty",
  disabled: ":disabled",
  checked: ":checked",
  indeterminate: ":indeterminate",
  default: ":default",
  required: ":required",
  valid: ":valid",
  invalid: ":invalid",
  in-range: ":in-range",
  out-of-range: ":out-of-range",
  placeholder-shown: ":placeholder-shown",
  autofill: ":autofill",
  read-only: ":read-only",
  rtl: ":dir(rtl)",
  ltr: ":dir(ltr)",
  before: "::before",
  after: "::after",
  first-letter: "::first-letter",
  first-line: "::first-line",
  marker: "::marker",
  selection: "::selection",
  file: "::file-selector-button",
  placeholder: "::placeholder",
);

@function -prefix($values) {
  $prefix: "";

  @each $value in $values {
    $prefix: $prefix + $value + var.$separator;
  }

  @return $prefix;
}

@mixin -generate($generators, $prepend: null, $append: null) {
  @if list.index($generators, "alignment") {
    @include alignment.generate($prepend, $append);
  }

  @if list.index($generators, "color") {
    @include color.generate($prepend, $append);
  }

  // special generator used only for unit tests
  @if list.index($generators, "tester") and var.$tester {
    @include tester.generate($prepend, $append);
  }

  @if list.index($generators, "typography") {
    @include typography.generate($prepend, $append);
  }

  @if list.index($generators, "width") {
    @include width.generate($prepend, $append);
  }
}

@mixin -with-dark-mode {
  @if var.$dark-mode == "media" {
    @include media.media-dark {
      @content;
    }
  }

  @if var.$dark-mode == "class" {
    .dark {
      @content;
    }
  }
}

@mixin -with-pseudo($prefix...) {
  @each $selector, $generators in var.$selectors {
    @if map.get($-pseudo-selectors, $selector) {
      $pseudo: map.get($-pseudo-selectors, $selector);
      @include -generate($generators, -prefix(list.join($prefix, ($selector))), $pseudo);
    }
  }
}

@each $selector, $generators in var.$selectors {
  @if $selector == "base" {
    @include -generate($generators);
  }

  @if $selector == "dark" {
    @include -with-dark-mode {
      @include -generate($generators, -prefix("dark"));
      @include -with-pseudo("dark");
    }
  }

  @else if $selector == "responsive" {
    @each $name, $value in var.$screens {
      @include media.media-up-to($name) {
        @include -generate($generators, -prefix($name));
        @include -with-pseudo($name);

        @include -with-dark-mode {
          @include -generate($generators, -prefix(($name, "dark")));
          @include -with-pseudo($name, "dark");
        }
      }
    }
  }

  @else if map.get($-pseudo-selectors, $selector) {
    $pseudo: map.get($-pseudo-selectors, $selector);
    @include -generate($generators, -prefix($selector), $pseudo);
  }
}
