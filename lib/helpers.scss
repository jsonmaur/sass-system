@use "sass:color";
@use "sass:list";
@use "sass:map";
@use "sass:meta";

//
// Weird way to make an empty map (ಠ_ಠ)
//
@function empty-map() {
  @return map.remove((x: x), x);
}

//
// Check the type of a variable while allowing an empty list in place of a map for the sake of
// simplicity. e.g. If you want to disable something in the config, you can simply use `()`
// instead of the annoying `helpers.empty-map()`.
//
@function check-type($expected, $value, $name: null) {
  @if meta.type-of($expected) != string {
    @error "`check-type` expects a type as the first argument";
  }

  $type: meta.type-of($value);
  $message: "Expected a #{$expected}, got a #{$type}";
  @if $name {
    $message: "Expected `#{$name}` to be a #{$expected}, got a #{$type}";
  }

  @if $type != $expected {
    @if $expected == map and ($type == list and list.length($value) == 0) {
      @return true;
    }

    @error $message;
  }

  @return true;
}

//
// Removes items from the beginning of a list
//
@function list-shift($list, $count: 1) {
  $result: [];

  @if meta.type-of($list) != list {
    @error "`list-shift` expected a list, got #{meta.type-of($list)}";
  }

  @for $i from $count + 1 through list.length($list) {
    $result: list.append($result, list.nth($list, $i));
  }

  @return $result;
}

//
// A helper function to merge two lists into one list. Does not remove duplicate values.
//
@function list-merge($list1, $list2) {
  $result: $list1;

  @if meta.type-of($list1) != list {
    @error "`list-merge` expected a list, got #{meta.type-of($list1)}";
  }
  @if meta.type-of($list2) != list {
    @error "`list-merge` expected a list, got #{meta.type-of($list2)}";
  }

  @each $value in $list2 {
    $result: list.append($result, $value);
  }

  @return $result;
}

//
// A helper function similar to `map.deep-merge`, but will also merge any nested lists. Items in
// the second argument list will take priority in the event of a key conflict. Lists with
// different separators or surroundings (brackets vs. parenthesis) will not be merged.
//
@function map-list-merge($map1, $map2) {
  $result: $map1;

  @if meta.type-of($map1) != map {
    @error "`map-list-merge` expected a map, got #{meta.type-of($map1)}";
  }
  @if meta.type-of($map2) != map {
    @error "`map-list-merge` expected a map, got #{meta.type-of($map2)}";
  }

  @each $key, $value2 in $map2 {
    $value1: map.get($result, $key);

    @if
      meta.type-of($value1) != meta.type-of($value2) or
      not map.has-key($result, $key) or
      not (meta.type-of($value1) == map and meta.type-of($value2) == map) {

      @if
        (meta.type-of($value1) == list and meta.type-of($value2) == list) and
        (list.separator($value1) == list.separator($value2)) and
        (list.is-bracketed($value1) == list.is-bracketed($value2)) {

        $result: map.merge($result, ($key: list-merge($value1, $value2)));
      } @else {
        $result: map.merge($result, ($key: $value2));
      }
    } @else {
      $result: map.merge($result, ($key: map-list-merge($value1, $value2)));
    }
  }

  @return $result;
}

//
// Takes in a list of values and some options, and returns each value joined into one string.
// If `$separator` is passed, it is used to join the values. If `$trailing` is passed, the
// resulting string will have a trailing separator (this is useful so the result can be prefixed
// to other classnames without any hassle).
//
@function combine($values, $opts...) {
  $opts: meta.keywords($opts);
  $result: "";

  @if
    list.length($values) > 0 and
    (meta.type-of($values) == list or meta.type-of($values) == arglist)  {

    @for $i from 1 through list.length($values) {
      $value: list.nth($values, $i);

      @if $value != null and $value != "" {
        @if $i >= list.length($values) and map.get($opts, trailing) == false {
          $result: $result + $value;
        } @else {
          $result: $result + $value + map.get($opts, separator);
        }
      }
    }
  }

  @return $result;
}

//
// Generate darker and ligher colors for each color in a map. 4 variants of each for a total of 9.
//
@function color-variants($colors) {
  @if meta.type-of($colors) != map {
    @error "`color-variants` expected a map, got #{meta.type-of($colors)}";
  }

  @each $key, $value in $colors {
    $variants: empty-map();
    $name-base: #{$key}-500;

    @for $i from 1 through 4 { // 80%, 60%, 40%, 20%
      $name: #{$key}-#{$i}00;
      $mixed: color.mix(black, $value, $weight: 100 - ($i * 20%));
      $variants: map.set($variants, $name, $mixed);

      @if $mixed == $value {
        @warn "Color `#{$value}` is too dark, unable to generate darker shades. `.#{$name}` will be the same as `.#{$name-base}`.";
      }
    }

    // add original color with suffix
    $variants: map.set($variants, $name-base, $value);

    @for $i from 6 through 9 { // 30%, 50%, 70%, 90%
      $name: #{$key}-#{$i}00;
      $mixed: color.mix(white, $value, $weight: 30 + (($i - 6) * 20%));
      $variants: map.set($variants, $name, $mixed);

      @if $mixed == $value {
        @warn "Color `#{$value}` is too light, unable to generate lighter tints. `.#{$name}` will be the same as `.#{$name-base}`.";
      }
    }

    // remove original color without suffix
    $colors: map.remove($colors, $key);
    $colors: map.merge($colors, $variants);
  }

  @return $colors;
}
